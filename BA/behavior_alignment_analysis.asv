%% Analysis of behaviorally aligned data
%% Find and pull blocks for injured animals only
if ~exist('listBl','var')
    load('C:\MyRepos\disstrack\BA\block_list.mat')
end
cDir = 'P:\Extracted_Data_To_Move\Rat\Intan\phProject\phProject';
idxT = ~isnan(listBl.exp_time);
listBlI = listBl(idxT,:); % new table with only injured animals
[uniq,idxU] = unique(listBlI(:,[1,4])); % find unique blocks for each experimental timepoint
nUniq = numel(idxU);
nAn = numel(unique(uniq.animal_name));
preInj = cell(nAn,1);
postInj1 = cell(nAn,1);
postInj2 = cell(nAn,1);
postInj3 = cell(nAn,1);
postInj4 = cell(nAn,1);
listBA_injH = table(preInj,postInj1,postInj2,postInj3,postInj4); % create table to store mfr data for each channel
listBA_uninjH = table(preInj,postInj1,postInj2,postInj3,postInj4); % create table to store mfr data for each channel
listBA_injH.Properties.RowNames = unique(uniq.animal_name);
listBA_uninjH.Properties.RowNames = unique(uniq.animal_name);
%% Fill tables
for i = 1:nUniq % iterate through every animal/date combination
    refN = idxU(i); % id corresponding index for table
    check = listBlI(refN,[1,4]);
    c = ismember(listBlI(:,[1,4]),check,"rows"); % find any days with multiple blocks
    if sum(c) == 1
        load(fullfile(cDir,listBlI.animal_name{refN},[listBlI.block_name{refN} '_Block.mat'])); % load file
        fOrd = contains(listBlI.array_order{refN}{1},listBlI.reach{refN});
        nCh = [blockObj.Channels.port_number]';
        succE = blockObj.Events(contains([blockObj.Events.Name],'GraspStarted'));
        fs = blockObj.SampleRate; % block length, should be in sec
        hArr = cell(2,1);
        for ii = 1:2 % repeats for each array
            if fOrd == 1 % switches based on the array opposite the reaching limb (i.e. injured hemisphere first)
                flip = [2,1];
                chan = find(nCh == (flip(ii)));
                sCh = size(chan,1);
                fprintf('%s_%s Array %d\n',listBlI.animal_name{refN},listBlI.block_name{refN},flip(ii));
            else
                chan = find(nCh == ii);
                sCh = size(chan,1);
                fprintf('%s_%s Array %d\n',listBlI.animal_name{refN},listBlI.block_name{refN},ii);
            end
            hBA = zeros(sCh,fs*2); % 1 sec window on either side of grasp
            for iii = 1:sCh
                chID = chan(iii);
                sp = blockObj.getSpikeTrain(chID); % spike times in samples
                hh = [];
                for iv = 1:size(succE,2)
                    ev = round(succE(iv).Ts*fs); % events in seconds and converted to samples
                    idxV = sp(sp>(ev-fs) & sp<=(ev+fs)); % index of spike times that fall in the window 1s on either side of grasp
                    winV = idxV - (ev-fs); % zeroing beginning of trial
                    hld = zeros(1,fs*2); % assigning ones to the spike sample number
                    hld(1,winV) = 1;
                    if size(hld,2) ~= 60000
                        check;
                    end
                    % CHECK THAT INDEXING IS CORRECT!!
                    hh = [hh; hld];
                end
                hBA(iii,:) = sum(hh,1)/size(succE,2); % summed spikes for each bin across all the trials
                % NORMALIZATION TO NUMBER OF TRIALS IN THE ABOVE
                % APPROPRIATE??
            end
            hArr{ii} = hBA;
        end
            idxR = find(contains(listBA_injH.Properties.RowNames,listBlI.animal_name{refN})); % row number based on animal name
            idxC = listBlI.exp_time(refN) + 1; % column number based on timepoint
            listBA_injH{idxR,idxC} = hArr(1);
            listBA_uninjH{idxR,idxC} = hArr(2);
    else % takes into account multiple blocks for a session
        nbl = sum(c); 
        hArr = cell(2,1);
        mBl{1} = load(fullfile(cDir,listBlI.animal_name{refN},[listBlI.block_name{refN} '_Block.mat']));
        fOrd = contains(listBlI.array_order{refN}{1},listBlI.reach{refN});
        fs = mBl{1}.blockObj.SampleRate; % block length, should be in sec
        nCh = [mBl{1}.blockObj.Channels.port_number]';
        succE = mBl{1}.blockObj.Events(contains([mBl{1}.blockObj.Events.Name],'GraspStarted'));
        for ii = 1:2 % repeats for each array
            if fOrd == 1 % switches based on the array opposite the reaching limb (i.e. injured hemisphere first)
                flip = [2,1];
                chan = find(nCh == (flip(ii)));
                sCh = size(chan,1);
                fprintf('%s_%s Array %d\n',listBlI.animal_name{refN},listBlI.block_name{refN},flip(ii));
            else
                chan = find(nCh == ii);
                sCh = size(chan,1);
                fprintf('%s_%s Array %d\n',listBlI.animal_name{refN},listBlI.block_name{refN},ii);
            end
            hBA = zeros(sCh,fs*2); % 1 sec window on either side of grasp
            for iii = 1:sCh
                chID = chan(iii);
                sp = mBl{1}.blockObj.getSpikeTrain(chID); % spike times in samples
                hh = [];                
                for iv = 1:size(succE,2)
                    ev = round(succE(iv).Ts*fs); % events in seconds and converted to samples
                    idxV = sp(sp>(ev-fs) & sp<=(ev+fs)); % index of spike times that fall in the window
                    winV = idxV - (ev-fs); % zeroing beginning of trial
                    hld = zeros(1,fs*2); % assigning ones to the spike sample number
                    hld(1,winV) = 1;
                    hh = [hh; hld];
                end
                hBA(iii,:) = sum(hh,1)/size(hh,1); % summed spikes for each bin across all the trials
            end
            hArr{ii} = hBA;
        end
        for cc = 2:nbl
            f = find(c);
            iC = f(cc);
            mBl{cc} = load(fullfile(cDir,listBlI.animal_name{iC},[listBlI.block_name{iC} '_Block.mat']));
            fOrd = contains(listBlI.array_order{iC}{1},listBlI.reach{iC});
            nCh = [mBl{cc}.blockObj.Channels.port_number]';
            succE = mBl{cc}.blockObj.Events(contains([mBl{cc}.blockObj.Events.Name],'GraspStarted'));
            for ii = 1:2 % repeats for each array
                if fOrd == 1 % switches based on the array opposite the reaching limb (i.e. injured hemisphere first)
                    flip = [2,1];
                    chan = find(nCh == (flip(ii)));
                    sCh = size(chan,1);
                    fprintf('%s_%s Array %d\n',listBlI.animal_name{iC},listBlI.block_name{iC},flip(ii));
                else
                    chan = find(nCh == ii);
                    sCh = size(chan,1);
                    fprintf('%s_%s Array %d\n',listBlI.animal_name{iC},listBlI.block_name{iC},ii);
                end
                hBA = zeros(sCh,fs*2); % 1 sec window on either side of grasp
                for iii = 1:sCh
                    chID = chan(iii);
                    sp = mBl{cc}.blockObj.getSpikeTrain(chID); % spike times in samples
                    hh = [];
                    for iv = 1:size(succE,2)
                        ev = round(succE(iv).Ts*fs); % events in seconds and converted to samples
                        idxV = sp(sp>(ev-fs) & sp<=(ev+fs)); % index of spike times that fall in the window
                        winV = idxV - (ev-fs); % zeroing beginning of trial
                        hld = zeros(1,fs*2); % assigning ones to the spike sample number
                        hld(1,winV) = 1;
                        hh = [hh; hld];
                    end
                    hBA(iii,:) = sum(hh,1)/size(hh,1); % summed spikes for each bin across all the trials
                end
                hArr{ii} = hArr{ii} + hBA; % add other summed blocks to prevous 
            end
        end
        idxR = find(contains(listBA_injH.Properties.RowNames,listBlI.animal_name{refN})); % row number based on animal name
        idxC = listBlI.exp_time(refN) + 1; % column number based on timepoint
        listBA_injH{idxR,idxC} = hArr(1);
        listBA_uninjH{idxR,idxC} = hArr(2);
    end
clearvars -except listBl listBlI listBA_injH listBA_uninjH nUniq idxU tankObj cDir
end
%% Bin average data
avg_act = array2table(cell(2,5));
avg_act.Properties.VariableNames = listBA_injH.Properties.VariableNames;
avg_act.Properties.RowNames = {'injH','uninjH'};
bin_size = 100; % in ms
fs = 30000;
% for injured hemisphere
for i = 1:5 % repeats for each timepoint
    allch = cell2mat(listBA_injH{:,i});
    m = sum(allch,1)/size(allch,1); % divides by number of channels, APPROPRIATE NORMALIZATION STEP???
    nM = bin_data(m,bin_size,fs);
    avg_act{1,i} = {nM};
end
% for uninjured hemisphere
for i = 1:5 % repeats for each timepoint
    allch = cell2mat(listBA_uninjH{:,i});
    m = sum(allch,1)/size(allch,1); % divides by number of channels, APPROPRIATE NORMALIZATION STEP???
    nM = bin_data(m,bin_size,fs);
    avg_act{2,i} = {nM};
end
%% Plot binned average activity 
if isa(avg_act,'table')
    avg_act = table2array(avg_act);
end
figure;
for i = 1:numel(avg_act)
subplot(5,2,i);
bar(avg_act{i},1,'FaceColor',[.9 .9 .9],'EdgeColor','none');
hold on
sm_act = smooth(avg_act{i},'sgolay');
plot(sm_act,'Color',[0.45, 0.15, 0.6 0.4],'LineWidth',2)
set(gca,'TickDir','out','FontName', 'NewsGoth BT');
box off
ylabel('Firing rate');
xlabel('Time (s)');
ylim([0 2]);
yticks(0:0.5:2)
xlim([0.5 20.5]);
xticks(0.5:2.5:20.5)
xticklabels(-1:0.25:1)
end
%% Bin average animal data
sz_injH = cell2mat(cellfun(@(x) size(x,1),table2array(listBA_injH),'UniformOutput',false));
sz_uninjH = cell2mat(cellfun(@(x) size(x,1),table2array(listBA_uninjH),'UniformOutput',false));
an_act_injH = cellfun(@(x) mean(x,1),table2array(listBA_injH),'UniformOutput',false);
an_act_uninjH = cellfun(@(x) mean(x,1),table2array(listBA_uninjH),'UniformOutput',false);
bin_size = 100; % in ms
fs = 30000;
% for injured hemisphere
for i = 1:numel(an_act_injH) % repeats for each cell
    m = an_act_injH{i}./sz_injH(i); % divides by number of channels, APPROPRIATE NORMALIZATION STEP???
    if isempty(m)
        nM = NaN;
    else
        nM = bin_data(m,bin_size,fs);
    end
    an_act_injH{i} = {nM};
end
% for uninjured hemisphere
for i = 1:numel(an_act_uninjH) % repeats for each cell
    m = an_act_uninjH{i}./sz_injH(i); % divides by number of channels, APPROPRIATE NORMALIZATION STEP???
    if isempty(m)
        nM = NaN;
    else
        nM = bin_data(m,bin_size,fs);
    end
    an_act_uninjH{i} = {nM};
end
an_act_injH = cell2table(an_act_injH);
an_act_uninjH = cell2table(an_act_uninjH);
an_act_injH.Properties.VariableNames = listBA_injH.Properties.VariableNames;
an_act_uninjH.Properties.VariableNames = listBA_uninjH.Properties.VariableNames;
an_act_injH.Properties.RowNames = listBA_injH.Properties.RowNames;
an_act_uninjH.Properties.RowNames = listBA_uninjH.Properties.RowNames;
%% Plot binned average animal activity 
if isa(an_act_injH,'table')
    an_act_injH = table2array(an_act_injH);
    an_act_uninjH = table2array(an_act_uninjH);
end
figure;
c = 0;
for i = 1:2
    if i == 1
        T = an_act_injH;
        c = [1 3 5 7 9];
    else
        T = an_act_uninjH;
    end
    for ii = 1:5
        c = c + 1;
        subplot(5,2,c);
        hold on
        for iii = 1:size(T,1)
            sm_act = smooth(T{iii,ii},'sgolay');
            plot(sm_act);
        end
        set(gca,'TickDir','out','FontName', 'NewsGoth BT');
        box off
        ylabel('Firing rate');
        xlabel('Time (s)');
        xlim([0.5 20.5]);
        xticks(0.5:2.5:20.5)
        xticklabels(-1:0.25:1)
    end
end
